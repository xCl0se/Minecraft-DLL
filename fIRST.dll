#include <windows.h>
#include <iostream>
#include <thread>
#include <atomic>
#include <chrono>
#include <map>

HINSTANCE hInst;
HWND hAimAssistWnd;
int aimCorrectionX = 5;
int aimCorrectionY = 5;
int clicksPerSecond = 10;
std::atomic<bool> autoClicking(false);
std::atomic<bool> aimAssistActive(false);

// Raccourcis clavier
std::map<std::string, int> hotkeys = {
    {"AimAssist", VK_F1},
    {"AutoClick", VK_F2}
};

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void AdjustMouseMovement(int& x, int& y);
void AutoClick();
void RegisterHotkeys(HWND hWnd);
void UnregisterHotkeys(HWND hWnd);

void AdjustMouseMovement(int& x, int& y) {
    x += aimCorrectionX;
    y += aimCorrectionY;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH:
        hInst = hModule;
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        autoClicking = false;
        aimAssistActive = false;
        break;
    }
    return TRUE;
}

extern "C" __declspec(dllexport) void ShowMenu() {
    WNDCLASS wc = { 0 };
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInst;
    wc.lpszClassName = L"AimAssistMenuClass";

    if (!RegisterClass(&wc)) {
        return;
    }

    hAimAssistWnd = CreateWindowEx(
        0,
        wc.lpszClassName,
        L"Aim Assist Menu - Dev by Close",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 300, 300,
        NULL, NULL, hInst, NULL
    );

    if (hAimAssistWnd) {
        ShowWindow(hAimAssistWnd, SW_SHOW);
        UpdateWindow(hAimAssistWnd);
        RegisterHotkeys(hAimAssistWnd);
    }
}

extern "C" __declspec(dllexport) void AimAssist() {
    if (aimAssistActive) {
        POINT pt;
        if (GetCursorPos(&pt)) {
            AdjustMouseMovement(pt.x, pt.y);
            SetCursorPos(pt.x, pt.y);
        }
    }
}

extern "C" __declspec(dllexport) void StartAutoClick() {
    if (!autoClicking) {
        autoClicking = true;
        std::thread(AutoClick).detach();
    }
}

extern "C" __declspec(dllexport) void StopAutoClick() {
    autoClicking = false;
}

void AutoClick() {
    while (autoClicking) {
        INPUT input = { 0 };
        input.type = INPUT_MOUSE;
        input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
        SendInput(1, &input, sizeof(INPUT));

        input.mi.dwFlags = MOUSEEVENTF_LEFTUP;
        SendInput(1, &input, sizeof(INPUT));

        std::this_thread::sleep_for(std::chrono::milliseconds(1000 / clicksPerSecond));
    }
}

void RegisterHotkeys(HWND hWnd) {
    RegisterHotKey(hWnd, 1, 0, hotkeys["AimAssist"]);
    RegisterHotKey(hWnd, 2, 0, hotkeys["AutoClick"]);
}

void UnregisterHotkeys(HWND hWnd) {
    UnregisterHotKey(hWnd, 1);
    UnregisterHotKey(hWnd, 2);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    switch (message) {
    case WM_CREATE:
        CreateWindow(L"STATIC", L"X Correction:", WS_VISIBLE | WS_CHILD, 10, 10, 100, 20, hWnd, NULL, hInst, NULL);
        CreateWindow(L"EDIT", L"5", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_NUMBER, 120, 10, 50, 20, hWnd, (HMENU)1, hInst, NULL);

        CreateWindow(L"STATIC", L"Y Correction:", WS_VISIBLE | WS_CHILD, 10, 40, 100, 20, hWnd, NULL, hInst, NULL);
        CreateWindow(L"EDIT", L"5", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_NUMBER, 120, 40, 50, 20, hWnd, (HMENU)2, hInst, NULL);

        CreateWindow(L"STATIC", L"Clicks per Second:", WS_VISIBLE | WS_CHILD, 10, 70, 100, 20, hWnd, NULL, hInst, NULL);
        CreateWindow(L"EDIT", L"10", WS_VISIBLE | WS_CHILD | WS_BORDER | ES_NUMBER, 120, 70, 50, 20, hWnd, (HMENU)3, hInst, NULL);

        CreateWindow(L"BUTTON", L"Apply", WS_VISIBLE | WS_CHILD, 10, 100, 75, 25, hWnd, (HMENU)4, hInst, NULL);
        CreateWindow(L"BUTTON", L"Start AutoClick", WS_VISIBLE | WS_CHILD, 10, 130, 100, 25, hWnd, (HMENU)5, hInst, NULL);
        CreateWindow(L"BUTTON", L"Stop AutoClick", WS_VISIBLE | WS_CHILD, 120, 130, 100, 25, hWnd, (HMENU)6, hInst, NULL);

        CreateWindow(L"STATIC", L"Dev by Close Â©2024", WS_VISIBLE | WS_CHILD, 10, 170, 200, 20, hWnd, NULL, hInst, NULL);

        CreateWindow(L"STATIC", L"Hotkeys:", WS_VISIBLE | WS_CHILD, 10, 200, 200, 20, hWnd, NULL, hInst, NULL);
        CreateWindow(L"STATIC", L"F1: Toggle Aim Assist", WS_VISIBLE | WS_CHILD, 10, 220, 200, 20, hWnd, NULL, hInst, NULL);
        CreateWindow(L"STATIC", L"F2: Toggle AutoClick", WS_VISIBLE | WS_CHILD, 10, 240, 200, 20, hWnd, NULL, hInst, NULL);
        break;
    case WM_COMMAND:
        if (LOWORD(wParam) == 4) {  // Apply button
            wchar_t buffer[10];

            GetWindowText(GetDlgItem(hWnd, 1), buffer, 10);
            aimCorrectionX = _wtoi(buffer);

            GetWindowText(GetDlgItem(hWnd, 2), buffer, 10);
            aimCorrectionY = _wtoi(buffer);

            GetWindowText(GetDlgItem(hWnd, 3), buffer, 10);
            clicksPerSecond = _wtoi(buffer);

            MessageBox(hWnd, L"Settings Applied!", L"Success", MB_OK);
        } else if (LOWORD(wParam) == 5) {  // Start AutoClick button
            StartAutoClick();
        } else if (LOWORD(wParam) == 6) {  // Stop AutoClick button
            StopAutoClick();
        }
        break;
    case WM_HOTKEY:
        if (wParam == 1) {  // F1 to toggle Aim Assist
            aimAssistActive = !aimAssistActive;
            std::wstring status = aimAssistActive ? L"Aim Assist Activated" : L"Aim Assist Deactivated";
            MessageBox(hWnd, status.c_str(), L"Status", MB_OK);
        } else if (wParam == 2) {  // F2 to toggle AutoClick
            if (autoClicking) {
                StopAutoClick();
                MessageBox(hWnd, L"AutoClick Deactivated", L"Status", MB_OK);
            } else {
                StartAutoClick();
                MessageBox(hWnd, L"AutoClick Activated", L"Status", MB_OK);
            }
        }
        break;
    case WM_DESTROY:
        StopAutoClick();
        UnregisterHotkeys(hWnd);
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}
